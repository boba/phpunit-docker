# {{ project.name }} Docker Container.

[![Docker pull](https://img.shields.io/docker/pulls/{{ project.code_name }}/{{ project.code_name }}.svg)](https://hub.docker.com/r/{{ project.code_name }}/{{ project.code_name }}/) [![Docker pull](https://img.shields.io/docker/stars/{{ project.code_name }}/{{ project.code_name }}.svg)](https://hub.docker.com/r/{{ project.code_name }}/{{ project.code_name }}/) [![Github issues](https://img.shields.io/github/issues/JulienBreux/{{ project.code_name }}-docker.svg)](https://github.com/JulienBreux/{{ project.code_name }}-docker/issues) [![License](https://img.shields.io/github/license/JulienBreux/{{ project.code_name }}-docker.svg)](https://github.com/JulienBreux/{{ project.code_name }}-docker/blob/master/LICENSE)


[Docker](https://www.docker.com) container to install and run [{{ project.name }}]({{ project.website }}).

## Features

* [{{ project.name }}]({{ project.website }})
  * Latest snapshot (master){% for version in versions %}
  * [`{{ version }}`](https://github.com/sebastianbergmann/phpunit/blob/{{ version | split: "." | slice: 0, 2 | join: "." }}/ChangeLog-{{ version | split: "." | slice: 0, 2 | join: "." }}.md){% endfor %}
* [PHP](https://php.net) [{{ php.version }}](https://php.net/ChangeLog-{{ php.version | split: "." | slice: 0, 1 | join: "." }}.php)

## Installation / Usage

1. Install the {{ project.code_name }}/{{ project.code_name }} container:

    ``` sh
	$ docker pull {{ project.code_name }}/{{ project.code_name }}
	```

2. Create a {{ project.code_name }}.xml defining your tests suites.

    ``` xml
    ...
    ```

3. Run {{ project.name }} through the {{ project.name }} container:

    ``` sh
	$ docker run -v $(pwd):/app --rm {{ project.code_name }}/{{ project.code_name }} run
    ```
    or in shorthand add
    ``` sh
	$ sudo sh -c "printf \"#!/bin/sh
    export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin
    docker run -v $(pwd):/app --rm {{ project.code_name }}/{{ project.code_name }} run \\\$@
    \" > /usr/local/bin/{{ project.code_name }}"
	$ sudo chmod +x /usr/local/bin/{{ project.code_name }}
    ```
    and then from host machine just
    ``` sh
	$ {{ project.code_name }} --version
    ```

To run, test and develop the {{ project.name }} Dockerfile itself, you must use the source directly:

1. Download the source:

    ``` sh
	$ git clone {{ project.repository }}
    ```

2. Switch to the {{ project.code_name }}-docker directory:

    ``` sh
	$ cd {{ project.code_name }}-docker
    ```

3. Build the container:

    ``` sh
	$ docker build -t {{ project.code_name }}/{{ project.code_name }} .
    ```

4. Test running the container:

    ``` sh
	$ docker run {{ project.code_name }}/{{ project.code_name }} --help
	```

## How to generate?

### Install associate GEMs

``` sh
$ gem install bundle
$ bundle
```

### Generate a new version

``` sh
version={{ versions.first }} rake version:add
```

### Remove a version

An error in your generation?

``` sh
version={{ versions.first }} rake version:remove
```
